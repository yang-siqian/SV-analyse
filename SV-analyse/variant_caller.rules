import os

localrules: call_variants

SV_TYPES = ("insertion", "deletion")
INDEL_TYPES = ("insertion", "deletion")
LOCAL_ASSEMBLY_ALIGNMENTS = config.get("local_assembly_alignments", "local_assembly_alignments.bam")
VARIANTS = config.get("variants", "variants.bed")
MIN_CONTIG_LENGTH = 40000

#
# All variant calls
#
#29
rule call_variants:
    input: "sv_calls.vcf", "indel_calls.vcf", "inversions.vcf"
    output: VARIANTS
    shell:
        """grep "^##" {input[0]} | sed '/INFO/d' > {output}; """
        """grep -h "^##" {input} | grep INFO | sort | uniq >> {output}; """
        """grep -h "^#CHROM" {input[0]} >> {output}; """
        "sed '/^#/d' {input} | sort -k 1,1 -k 2,2n >> {output};"
        "echo 29"

#
# SNVs
#

rule merge_snvs_calls:
    input: "snvs.bed"
    output: "merged_snvs.bed"
    shell: "cut -f 1-5 {input} | sort -k 1,1 -k 2,2n -k 3,3n -k 4,4 -k 5,5 | groupBy -i stdin -g 1,2,3,4,5 -c 4 -o count | sort -k 1,1 -k 2,2n -k 3,3n -k 6,6rn | groupBy -i stdin -g 1,2,3 -c 4,5,6 -o first,first,first | awk '$6 > 1' > {output};"


rule find_snvs_alignments:
    input: reference=config["reference"], alignments=LOCAL_ASSEMBLY_ALIGNMENTS
    output: "snvs.bed"
    params: min_contig_length=str(MIN_CONTIG_LENGTH)
    shell: "samtools view {input.alignments} | {SNAKEMAKE_DIR}/scripts/PrintGaps.py {input.reference} /dev/stdin --minLength 0 --maxLength 0 --minContigLength {params.min_contig_length} --outFile /dev/null --snv {output};"


#
# Small insertion/deletion (indel) calls
#
# 28
rule convert_indel_bed_to_vcf:
    input: "indel_calls.bed", config["reference"]
    output: "indel_calls.vcf"
    params: sample=config.get("sample", "UnnamedSample")
    shell: "{SNAKEMAKE_DIR}/scripts/variants_bed_to_vcf.py {input} {output} {params.sample} indel;"
         "echo 28"
# 27
rule call_indels:
    input: expand("indel_calls/{indel_type}.tab", indel_type=INDEL_TYPES)
    output: "indel_calls.bed"
    shell: "sort -k 1,1 -k 2,2n {input} > {output};"
         "echo 27"
# 26
rule combine_annotations_for_indel_type:
    input: "indel_calls/{indel_type}/filtered_gaps.bed", "indel_calls/{indel_type}/support_by_assembled_contigs.txt", "indel_calls/{indel_type}/assembled_contigs_coverage.txt", "indel_calls/{indel_type}/read_coverage.txt"
    output: "indel_calls/{indel_type}.tab"
    shell: """paste {input} | awk 'OFS="\\t" {{ print $0,"{wildcards.indel_type}" }}' > {output};"""
         "echo 26_{input}_{wildcards.indel_type}_{output}"
# 24
rule annotate_support_from_assembled_contigs_for_indels:
    input: "indel_calls/{indel_type}/gaps_2bp_or_more_without_homopolymers.bed"
    output: "indel_calls/{indel_type}/support_by_assembled_contigs.txt"
    shell: "cut -f 6 {input} > {output};"
         "echo 24_{input}_{output}"

rule annotate_strs_in_indels:
    input: "indel_calls/{indel_type}/gaps_2bp_or_more_without_homopolymers.bed", "strs_in_reference.bed"
    output: "indel_calls/{indel_type}/strs.txt"
    shell: "cut -f 1-3 {input[0]} | bedtools intersect -a stdin -b {input[1]} -loj -sorted | sed 's/\\t\./\\t0/g' | bedtools groupby -c 7 -o first -full | cut -f 7 > {output};"

# 22
rule annotate_coverage_of_pacbio_reads_for_indels:
    input: "indel_calls/{indel_type}/gaps_2bp_or_more_without_homopolymers.bed", "coverage.bed"
    output: "indel_calls/{indel_type}/read_coverage.txt"
    shell: """cut -f 1-3 {input[0]} | bedtools intersect -a stdin -b {input[1]} -loj -sorted | sed 's/\\t\./\\t0/g' | bedtools groupby -c 7 -o mean -full | cut -f 8 | awk '{{ printf("%2.2f\\n", $1) }}' > {output};"""
         "echo 22_{input[0]}_{input[1]}_{output}"
# 23
rule annotate_coverage_of_assembled_contigs_for_indels:
    input: "indel_calls/{indel_type}/gaps_2bp_or_more_without_homopolymers.bed", "assembled_contigs.depth.bed"
    output: "indel_calls/{indel_type}/assembled_contigs_coverage.txt"
    shell: "cut -f 1-3 {input[0]} | bedtools intersect -a stdin -b {input[1]} -loj -sorted | sed 's/\\t\./\\t0/g' | bedtools groupby -c 7 -o max -full | cut -f 8 > {output};"
         "echo 23_{input[0]}_{input[1]}_{output}"
# 4
rule calculate_coverage_from_assembled_contigs:
    input: reference=config["reference"], alignments=LOCAL_ASSEMBLY_ALIGNMENTS
    output: "assembled_contigs.depth.bed"
    shell: "bedtools bamtobed -i {input.alignments} | {SNAKEMAKE_DIR}/scripts/BedIntervalsToDepth.py /dev/stdin {input.reference} --out /dev/stdout | sort -k 1,1 -k 2,2n > {output};"
         "echo 4"
# 25
rule cut_indel_events_by_columns:
    input: "indel_calls/{indel_type}/gaps_2bp_or_more_without_homopolymers.bed"
    output: "indel_calls/{indel_type}/filtered_gaps.bed"
    shell: "cut -f 1-5 {input} > {output};"
         "echo 25_{input}_{output}"
# 21
rule filter_indel_events_by_size:
    input: "indel_calls/{indel_type}/gaps_without_homopolymers.bed"
    output: "indel_calls/{indel_type}/gaps_2bp_or_more_without_homopolymers.bed"
    shell: "awk '$4 >= 2' {input} | bedtools groupby -c 6 -o max -full > {output};"
         "echo 21_{input}_{output}"
# 20
rule remove_indel_events_in_homopolymers:
    input: "indel_calls/{indel_type}/gaps.bed"
    output: "indel_calls/{indel_type}/gaps_without_homopolymers.bed"
    run:
        command = """awk '$11 == "F"' {input} | cut -f 1,2,3,5,6,8 | sort -k 1,1 -k 2,2n -k 4,4n | {SNAKEMAKE_DIR}/scripts/PrintSNVSupport.py /dev/stdin /dev/stdout"""
        if wildcards.indel_type == "insertion":
            command = "%s | {SNAKEMAKE_DIR}/scripts/BedMod.py /dev/stdin {output} --leftjustify 1" % command
            shell("echo 20if")
        else:
            command = "%s > {output}" % command
            shell("echo 20else")
# 16
rule split_indels_by_type:
    input: "indel_calls/gaps.tiled.bed"
    output: "indel_calls/{indel_type}/gaps.bed"
    shell: "grep {wildcards.indel_type} {input} | sort -k 1,1 -k 2,2n > {output};"
         "echo 16_{wildcards.indel_type}"
# 15
rule filter_indel_gaps_by_tiling_path:
    input: "indel_calls/gaps.bed", "tiling_contigs.tab"
    output: "indel_calls/gaps.tiled.bed", "indel_calls/gaps.tiled.log"
    shell: "{SNAKEMAKE_DIR}/scripts/FilterGapsByTilingPath.py {input} > {output[0]} 2> {output[1]};"
        "echo 15_{input}_{output[0]}_{output[1]}"

# 2
rule find_indel_gaps_in_alignments:
    input: reference=config["reference"], alignments=LOCAL_ASSEMBLY_ALIGNMENTS
    output: "indel_calls/gaps.bed"
    params: indel_pack_distance="0", min_contig_length=str(MIN_CONTIG_LENGTH)
    shell: "samtools view {input.alignments} | {SNAKEMAKE_DIR}/scripts/PrintGaps.py {input.reference} /dev/stdin --minLength 30 --maxLength 50 --context 6 --removeAdjacentIndels --onTarget --minContigLength {params.min_contig_length} --condense {params.indel_pack_distance} --outFile {output};"
         "echo 2_{params.min_contig_length}_{params.indel_pack_distance}"


#
# Structural variation (SV) calls
#
# 19
rule convert_sv_bed_to_vcf:
    input: "sv_calls/sv_calls_with_repeats.bed", config["reference"]
    output: "sv_calls.vcf"
    params: sample=config.get("sample", "UnnamedSample")
    shell: "{SNAKEMAKE_DIR}/scripts/variants_bed_to_vcf.py {input} {output} {params.sample} sv;"
         "echo 19_{input}_{output}_{params.sample}"



rule call_svs:
    input: "sv_calls.bed"


# 18
rule collect_all_summarized_sv_calls:
    input: expand("sv_calls/repeat_classified_{sv_type}.bed", sv_type=SV_TYPES)
    output: "sv_calls/sv_calls_with_repeats.bed"
    shell: "sort -k 1,1 -k 2,2n -m {input} | uniq > {output};"
         "echo 18_{input}_{output}"
# 17
rule collect_summarized_sv_calls_within_type:
    input: "sv_calls/summarized_{sv_type}"
    output: "sv_calls/repeat_classified_{sv_type}.bed"
    shell: """for file in {input}/*.bed; do repeat_type=`basename ${{file/.bed/}} | sed 's/\./_/g'`; awk -v repeat_type=$repeat_type 'OFS="\\t" {{ print $0,repeat_type }}' $file; done | sort -k 1,1 -k 2,2n | uniq > {output};"""
         "echo 17"
# 14
rule summarize_calls_by_repeat_type:
    input: "sv_calls/all_annotated_with_trf.{sv_type}.bed"
    output: "sv_calls/summarized_{sv_type}"
    shell:
        "mkdir -p {output}; "
        "awk '$20 > 0.8' {input} > {output}/TRF.bed; "
        "echo q1;"
        "awk '$20 <= 0.8' {input} > sv_calls/not_trf.bed; "
        "echo q2;"
        "{SNAKEMAKE_DIR}/scripts/FixMasked.py 17 < sv_calls/not_trf.bed | awk '$18 < 0.7' > {output}/NotMasked.bed; "
        "echo q3;"
        "{SNAKEMAKE_DIR}/scripts/FixMasked.py 17 < sv_calls/not_trf.bed | awk '$18 >= 0.7' > sv_calls/repeat.bed; "
        "echo q4;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py sv_calls/repeat.bed --prefix AluY --minPrefix 1 --maxPrefix 1 --maxNotPrefix 0 --maxSTR 0 --remainder {output}/1.bed > {output}/AluY.simple.bed; "
        "echo q5;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/1.bed --prefix AluS --minPrefix 1 --maxPrefix 1 --maxNotPrefix 0 --maxSTR 0 --remainder {output}/2.bed > {output}/AluS.simple.bed; "
        "echo q6;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/2.bed --minSTR 1  --maxNotPrefix 0 --remainder {output}/4.bed > {output}/STR.bed; "
        "echo q7;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/4.bed --prefix L1HS  --maxNotPrefix 0 --remainder {output}/5.bed > {output}/L1HS.simple.bed; "
        "echo q8;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/5.bed --prefix Alu  --minPrefix 1 --maxNotPrefix 0 --maxSTR 0 --remainder {output}/6.bed > {output}/Alu.Mosaic.bed; "
        "echo q9;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/6.bed --prefix Alu  --minSTR 1 --minPrefix 1 --maxNotPrefix 0 --remainder {output}/7.bed > {output}/Alu.STR.bed; "
        "echo q10;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/7.bed --prefix ALR   --minPrefix 1 --maxNotPrefix 0 --remainder {output}/8.bed > {output}/ALR.bed; "
        "echo q11;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/8.bed --prefix SVA   --minPrefix 1 --maxNotPrefix 0 --remainder {output}/9.bed > {output}/SVA.simple.bed; "
        "echo q12;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/9.bed --prefix HERV   --minPrefix 1 --maxNotPrefix 0 --remainder {output}/10.bed > {output}/HERV.simple.bed; "
        "echo q13;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/10.bed --prefix L1P   --minPrefix 1 --maxNotPrefix 0 --remainder {output}/11.bed > {output}/L1P.bed; "
        "echo q14;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/11.bed --prefix BSR/Beta   --minPrefix 1 --maxNotPrefix 0 --remainder {output}/12.bed > {output}/Beta.bed; "
        "echo q15;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/12.bed --prefix HSAT   --minPrefix 1 --maxNotPrefix 0 --remainder {output}/13.bed > {output}/HSAT.bed; "
        "echo q16;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/13.bed --prefix MER   --minPrefix 1 --maxNotPrefix 0 --remainder {output}/14.bed > {output}/MER.bed; "
        "echo q17;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/14.bed --prefix L1   --minPrefix 1 --maxNotPrefix 0 --remainder {output}/15.bed > {output}/L1.bed; "
        "echo q18;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/15.bed --prefix LTR  --minPrefix 1 --maxNotPrefix 0 --remainder {output}/16.bed > {output}/LTR.bed; "
        "echo q19;"
        "{SNAKEMAKE_DIR}/scripts/PrintUniqueEvents.py {output}/16.bed --max 1 --remainder {output}/17.bed > {output}/Singletons.bed; "
        "echo q20;"
        "mv -f {output}/17.bed {output}/Complex.bed; "
        "echo q21;"
        "echo 14"


rule merge_sv_calls:
    input: expand("sv_calls/all_annotated.{sv_type}.bed", sv_type=SV_TYPES)
    output: "sv_calls.bed"
    shell: "sort -k 1,1 -k 2,2n {input} > {output};"


rule filter_annotated_sv_calls:
    input: "sv_calls/all_annotated.{sv_type}.bed"
    output: "sv_calls/annotated.{sv_type}.bed"
    # Filter out non-repetitive SVs or SVs with less than 70% masked sequence.
    shell: "grep -v NONE {input} | awk '$18 >= 0.70' > {output};"


# 13
rule annotate_sv_calls_with_trf:
    input: "sv_calls/all_annotated.{sv_type}.bed", "sv_calls/{sv_type}/rm/{sv_type}.fasta.trf"
    output: "sv_calls/all_annotated_with_trf.{sv_type}.bed"
    shell: "{SNAKEMAKE_DIR}/scripts/AnnotateWithTRF.py {input} {output};"
         "echo 13"
# 12
rule annotate_sv_calls_with_repeatmasker:
    input: calls="sv_calls/calls.{sv_type}.bed", repeats="sv_calls/{sv_type}/rm/{sv_type}.fasta.out", masked_fasta="sv_calls/{sv_type}/rm/{sv_type}.fasta.masked"
    output: "sv_calls/all_annotated.{sv_type}.bed"
    shell: "{SNAKEMAKE_DIR}/scripts/AnnotateGapBed.py {input.calls} {output} {input.repeats} {input.masked_fasta};"
         "echo 12_{input.calls}_{output}_{input.repeats}_{input.masked_fasta}"
# 10
rule trf_mask_sv_fasta:
    input: "sv_calls/{sv_type}/{sv_type}.fasta"
    output: "sv_calls/{sv_type}/rm/{sv_type}.fasta.trf"
    shell: "{SNAKEMAKE_DIR}/bin/trf {input} 2 7 7 80 10 20 500 -m -ngs -h > {output};"
         "echo 10"

def _get_repeat_species(wildcards):
    if "species" in config:
        return config["species"]
    else:
        return "Homo sapiens"

# 11
rule repeatmask_sv_fasta:
    input: "sv_calls/{sv_type}/{sv_type}.fasta"
    output: "sv_calls/{sv_type}/rm/{sv_type}.fasta.out", "sv_calls/{sv_type}/rm/{sv_type}.fasta.masked"
    params: threads="8", species=_get_repeat_species
    shell: """RepeatMasker -species "{params.species}" -dir `dirname {output[0]}` -xsmall -no_is -s -pa {params.threads} {input};"""
         "echo 11_{params.species}_{output[0]}_{params.threads}_{input}"

# 9
rule create_sv_fasta:
    input: "sv_calls/calls.{sv_type}.bed"
    output: "sv_calls/{sv_type}/{sv_type}.fasta"
    shell: "{SNAKEMAKE_DIR}/scripts/GapBedToFasta.py {input} {output};"
         "echo 9"

def _get_call_comparison_action(wildcards):
    if wildcards.sv_type == "insertion":
        return "window"
    else:
        return "intersect"

# 5
rule identify_calls_by_type:
    input: gaps="sv_calls/gaps.bed", alignments=LOCAL_ASSEMBLY_ALIGNMENTS
    output: "sv_calls/calls.{sv_type}.bed"
    params: call_comparison_action=_get_call_comparison_action, window="20", overlap="0.5"
    # Filter input gaps by SV type and omit gaps containing N bases. Insertion
    # coordinates are resized to their single-bp representation prior to
    # clustering and returned to their original values after clustering. After
    # clustering each call is annotated by the coverage of local assemblies.
    shell: """awk '$4 == "{wildcards.sv_type}" && index($6, "N") == 0' {input.gaps} | awk 'OFS="\\t" {{ if ("{wildcards.sv_type}" == "insertion") {{ $3=$2 + 1 }} print }}' | python {SNAKEMAKE_DIR}/scripts/cluster_calls.py --window {params.window} --reciprocal_overlap {params.overlap} /dev/stdin {params.call_comparison_action} | awk 'OFS="\\t" {{ if ("{wildcards.sv_type}" == "insertion") {{ $3=$2 + $5 }} print }}' | sort -k 1,1 -k 2,2n | while read line; do set -- $line; coverage=`samtools view -c {input.alignments} $1:$2-$3`; echo -e "$line\\t$coverage"; done > {output};"""
        "echo 5_{wildcards.sv_type}_{input.gaps}_{params.window}_{params.overlap}_{params.call_comparison_action}"

# 3
rule find_calls_by_gaps_in_alignments:
    input: reference=config["reference"], alignments=LOCAL_ASSEMBLY_ALIGNMENTS
    output: "sv_calls/gaps.bed"
    params: tsd_length="20", indel_pack_distance="20"
    shell: "samtools view -h {input.alignments} | {SNAKEMAKE_DIR}/scripts/PrintGaps.py {input.reference} /dev/stdin --qpos --condense {params.indel_pack_distance} --tsd {params.tsd_length} | sort -k 1,1 -k 2,2n > {output};"
         "echo 3_{input.alignments}_{input.reference}_{params.indel_pack_distance}_{params.tsd_length}"
# 8
rule tile_contigs_from_alignments:
    input: LOCAL_ASSEMBLY_ALIGNMENTS
    output: "tiling_contigs.tab"
    shell: "samtools view -h {input} | {SNAKEMAKE_DIR}/scripts/TilingPath.py /dev/stdin > {output};"
         "echo 8"

#
# Inversions
#
# 7
rule convert_inversion_bed_to_vcf:
    input: "sv_calls/merged_inversions.bed", config["reference"]
    output: "inversions.vcf"
    params: sample=config.get("sample", "UnnamedSample")
    shell: "{SNAKEMAKE_DIR}/scripts/variants_bed_to_vcf.py {input} {output} {params.sample} inversion;"
         "echo 7_{params.sample}"
# 6
rule merge_inversions:
    input: inversions="sv_calls/inversions.bed", alignments=LOCAL_ASSEMBLY_ALIGNMENTS
    output: "sv_calls/merged_inversions.bed"
    run:
        # Only try to sort and merge inversions if any exist.
        if os.stat(input.inversions).st_size > 0:
            shell("""sort -k 1,1 -k 2,2n {input.inversions} | bedtools merge -i stdin -d 0 -c 4 -o count | while read line; do set -- $line; coverage=`samtools view -c {input.alignments} $1:$2-$3`; echo -e "$line\\t$coverage"; done | awk 'OFS="\\t" {{ print $1,$2,$3,"inversion",$4,$5 }}' > {output}""")
            shell("echo 6if")
        else:
            shell("touch {output}")
            shell("echo 6else")
# 1
rule find_inversions:
    input: alignments=LOCAL_ASSEMBLY_ALIGNMENTS, reference=config["reference"]
    output: "sv_calls/inversions.bed"
    params: reference_window="5000", threads="8"
    shell: "samtools view {input.alignments} | {SNAKEMAKE_DIR}/scripts/mcst/screenInversions /dev/stdin {input.reference} {output} -w {params.reference_window} -r --noClip -j {params.threads};"
         "echo 1_{params.reference_window}_{params.threads}"
